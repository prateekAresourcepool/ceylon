import { Column } from "./utils/definition";
export interface KeyValue<V> {
    [key: string]: V;
}
export interface Row extends KeyValue<any> {
    __id__: number;
}
export interface Formatter {
    key: string;
    value: (row: Row, key: string, rowIndex?: number, columnIndex?: number) => string;
}
export interface Cell {
    formatted: string;
    value: any;
}
export interface Filter {
    lt?: number | string;
    gt?: number | string;
    eq?: number | string | boolean | number[] | string[] | boolean[];
}
export declare enum Sort {
    ASC = 1,
    DESC = -1,
    NONE = 0
}
export interface SortColumn {
    key: string;
    sort: Sort;
}
export interface Expression {
    filters: KeyValue<Filter>;
    search?: string;
    sort: SortColumn[];
}
export interface fetchOptions {
    from?: number;
    to?: number;
    limit?: number;
}
export interface serverInfo {
    fetch?: (options?: fetchOptions) => Promise<Row[]>;
    save?: (row: Row) => Promise<Row>;
    delete?: (row: Row) => Promise<Row>;
}
export declare enum EventType {
    select = "select",
    save = "save",
    delete = "delete",
    fetch = "fetch",
    sort = "sort",
    filter = "filter",
    search = "search",
    clear = "clear",
    export = "export",
    append = "append",
    initialize = "initialize",
    custom = "custom"
}
export interface Listener {
    type?: EventType;
    handler: (type: EventType, data?: any) => Promise<void>;
}
export interface Subscribers {
    [key: string]: Listener;
}
export interface Datasource {
    rows: Row[];
    view: number[];
    viewExpression: Expression;
    selected: number[];
    options: serverInfo;
    formatter: KeyValue<Formatter>;
    subscribers: Subscribers;
    cell: (key: string, viewIndex: number, columnIndex?: number) => Cell;
    distinct: (key: string) => Promise<object>;
    row: (rowIndex?: number, viewIndex?: number) => Row;
    size: () => number;
    select: (viewIndex?: number, checked?: boolean) => Promise<Row[]>;
    isSelected: (viewIndex: number) => boolean;
    filter: (key: string, value?: Filter) => Promise<Row[]>;
    search: (value: string) => Promise<Row[]>;
    sort: (key: string, sort: Sort) => Promise<Row[]>;
    save: (Row: Row) => Promise<Row>;
    delete: (viewIndex: number) => Promise<Row>;
    append: (row: Row) => Promise<Row[]>;
    refresh: () => Promise<boolean>;
    init: (options: serverInfo) => Promise<boolean>;
    clear: (options: {
        filter?: boolean;
        sort?: boolean;
        search?: boolean;
    }) => Promise<boolean>;
    addFormatter: (key: string, format: Formatter) => boolean;
    generateFormatters: (columns: Column[]) => boolean;
    exportView: (keys: string[]) => Promise<string[]>;
    setViewExpression: (filters?: KeyValue<Filter>, sort?: SortColumn[], search?: string) => Promise<boolean>;
    subscribe: (key: string, handler: Listener) => void;
    unsubscribe: (key: string) => void;
    trigger: (key: EventType, data: any) => Promise<void>;
}
export declare const toRow: (data: KeyValue<any>[]) => Promise<Row[]>;
