import { DataSource, Filter, Format, Id, KeyValue, Listener, Persistence, Property, Row, Sort } from './DataSource';
export declare class Sequence implements Id {
    private current;
    private readonly width;
    constructor(width?: number);
    id(value: KeyValue<any>): Promise<string>;
    reset(): void;
}
export declare class PropertyId implements Id {
    private readonly name;
    constructor(name: string);
    id(value: KeyValue<any>): Promise<string>;
    reset(): void;
}
export declare class DataView {
    protected data: {
        [key: string]: Row;
    };
    protected view: string[];
    private selection;
    private sequence;
    constructor(seq: Id);
    protected _add(value: KeyValue<any>): Promise<void>;
    protected _remove(rows: Row[]): Promise<void>;
    protected _update(row: Row): Promise<void>;
    protected _clear(width?: number): Promise<void>;
    protected _clearSelection(): Promise<void>;
    size(): number;
    total(): number;
    row(index: number): Row;
    value(index: number, name: string): any;
    selected(index: number): boolean;
    protected _select(index: number, state?: boolean): Promise<void>;
}
export declare class FilterSet {
    private filters;
    add(filter: Filter, name?: string): void;
    remove(name: string): void;
    filter(): Filter;
}
export declare class DataSourceImpl extends DataView implements DataSource {
    listeners: {
        [key: string]: Listener;
    };
    formatters: {
        [key: string]: Format;
    };
    properties: {
        [key: string]: Property;
    };
    private readonly persistence?;
    private sequenceDigits;
    private _filter?;
    private _search?;
    private _sort?;
    constructor(persistence: Persistence | undefined, id: Id | undefined);
    addListener(listener: Listener): void;
    init(props: Property[], seqDigits: number | undefined): Promise<void>;
    delete(row: Row[]): Promise<void>;
    add(values: KeyValue<any>[]): Promise<void>;
    refresh(): Promise<void>;
    clean(): Promise<void>;
    save(rows: Row[]): Promise<void>;
    filter(filter: Filter): Promise<void>;
    search(text: string): Promise<void>;
    sort(sort: Sort): Promise<void>;
    select(index: number, state: boolean | undefined): Promise<void>;
    formatted(index: number, name: string): Promise<any>;
    addFormatter(format: Format, combine: boolean | undefined): void;
    property(name: string): Property | undefined;
    private updateView;
    slice(from: number, to: number): Promise<Row[]>;
}
