"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatter = exports.ColumnType = void 0;
var moment_1 = __importDefault(require("moment"));
var ColumnType;
(function (ColumnType) {
    ColumnType["string"] = "string";
    ColumnType["int"] = "int";
    ColumnType["float"] = "float";
    ColumnType["boolean"] = "boolean";
    ColumnType["date"] = "date";
    ColumnType["currency"] = "currency";
})(ColumnType = exports.ColumnType || (exports.ColumnType = {}));
exports.formatter = function (column) {
    return {
        key: column.dataIndex,
        value: function (row, key, rowIndex) {
            var value = row[key];
            var out = "" + ((value != null && "" + value) || "");
            if (column.lookup && value != null) {
                if (typeof column.lookup === "function")
                    out = "" + (column.lookup(row[key]) || "");
                else if (typeof value === "string") {
                    out = "" + column.lookup[value];
                }
                else if (typeof value === "number")
                    out = "" + column.lookup[value.toString()];
            }
            else if (value && typeof value === "number") {
                if (column.decimal) {
                    out = value.toFixed(column.decimal);
                }
                if (column.thousandSeparator)
                    out = out.replace(/\B(?<!\.\d*)(?=(\d{3})+(?!\d))/g, ",");
            }
            else if (value && column.type === ColumnType.date && column.dateOut) {
                var date = Date.parse(value);
                if (typeof column.dateOut === "string")
                    out = moment_1.default(date).format(column.dateOut);
                else if (typeof column.dateOut === "function")
                    out = column.dateOut(value);
            }
            if (column.prefix) {
                out = ("" + column.prefix + out).trim();
            }
            if (column.suffix) {
                out = ("" + out + column.suffix).trim();
            }
            if (column.format) {
                out = column.format(row, key, out);
            }
            return out;
        }
    };
};
