"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFormatter = exports.Combine = exports.ArrayFormat = exports.SuffixFormat = exports.PrefixFormat = exports.EnumFormat = exports.CurrencyFormat = exports.NumberFormat = exports.DateFormat = void 0;
var moment_1 = __importDefault(require("moment"));
var DateFormat = /** @class */ (function () {
    function DateFormat(name, format, notSet) {
        if (format === void 0) { format = "YYYY-MM-DD"; }
        if (notSet === void 0) { notSet = ""; }
        this.name = name;
        this._format = format;
        this.notSet = notSet;
    }
    DateFormat.prototype.format = function (props, row, value) {
        return value ? moment_1.default(value).format(this._format) : this.notSet;
    };
    return DateFormat;
}());
exports.DateFormat = DateFormat;
var NumberFormat = /** @class */ (function () {
    function NumberFormat(props) {
        this.name = props.name;
        this._decimals = props.decimals;
        this._thousandSeparator = props.thousandSeparator;
    }
    NumberFormat.prototype.format = function (props, row, value) {
        var num = (value || 0);
        var format = "" + num;
        if (this._decimals !== undefined) {
            format = num.toFixed(this._decimals);
        }
        if (this._thousandSeparator) {
            format = format.replace(/\B(?<!\.\d*)(?=(\d{3})+(?!\d))/g, ",");
        }
        return format;
    };
    return NumberFormat;
}());
exports.NumberFormat = NumberFormat;
var CurrencyFormat = /** @class */ (function (_super) {
    __extends(CurrencyFormat, _super);
    function CurrencyFormat(props) {
        var _this = _super.call(this, props) || this;
        _this.currency = props.currency;
        return _this;
    }
    CurrencyFormat.prototype.format = function (props, row, value) {
        var format = _super.prototype.format.call(this, props, row, value);
        var cur;
        if (typeof this.currency === "function")
            cur = this.currency(props, row);
        else
            cur = this.currency;
        if (cur.prefix)
            return "" + cur.symbol + format;
        else
            return "" + format + cur.symbol;
    };
    return CurrencyFormat;
}(NumberFormat));
exports.CurrencyFormat = CurrencyFormat;
var EnumFormat = /** @class */ (function () {
    function EnumFormat(name, enums) {
        this.name = name;
        this.enums = enums;
    }
    EnumFormat.prototype.format = function (props, row, value) {
        return this.enums["" + value];
    };
    return EnumFormat;
}());
exports.EnumFormat = EnumFormat;
var PrefixFormat = /** @class */ (function () {
    function PrefixFormat(name, prefix, format) {
        this.name = name;
        this._format = format;
        this.prefix = prefix;
    }
    PrefixFormat.prototype.format = function (props, row, value) {
        var format = value;
        if (this._format) {
            format = this._format.format(props, row, value);
        }
        return "" + this.prefix + format;
    };
    return PrefixFormat;
}());
exports.PrefixFormat = PrefixFormat;
var SuffixFormat = /** @class */ (function () {
    function SuffixFormat(name, suffix, format) {
        this.name = name;
        this._format = format;
        this.suffix = suffix;
    }
    SuffixFormat.prototype.format = function (props, row, value) {
        var format = value;
        if (this._format) {
            format = this._format.format(props, row, value);
        }
        return "" + format + this.suffix;
    };
    return SuffixFormat;
}());
exports.SuffixFormat = SuffixFormat;
var ArrayFormat = /** @class */ (function () {
    function ArrayFormat(props) {
        this.name = props.name;
        this._format = props.format;
        this.maxVisible = props.maxVisible;
    }
    ArrayFormat.prototype.format = function (props, row, value) {
        var _this = this;
        return value.slice(0, this.maxVisible || value.length).map(function (o) {
            return _this._format.format(props, row, o) || o;
        });
    };
    return ArrayFormat;
}());
exports.ArrayFormat = ArrayFormat;
var Combine = /** @class */ (function () {
    function Combine(name, a, b) {
        this.name = name;
        this.a = a;
        this.b = b;
    }
    Combine.prototype.format = function (props, row, value) {
        var a = this.a.format(props, row, value);
        return this.b.format(props, row, a);
    };
    return Combine;
}());
exports.Combine = Combine;
function _create(props) {
    switch (props.type) {
        case "number": {
            if (props.enum)
                return new EnumFormat(props.name, props.enum);
            else if (props.currency) {
                var cur = void 0;
                if (typeof props.currency === "string") {
                    cur = { symbol: props.currency, prefix: true };
                }
                else
                    cur = props.currency;
                return new CurrencyFormat({
                    name: props.name,
                    thousandSeparator: props.thousandSep,
                    decimals: props.decimals,
                    currency: cur
                });
            }
            else if ((props.decimals !== undefined) || props.thousandSep) {
                return new NumberFormat({
                    name: props.name,
                    thousandSeparator: props.thousandSep,
                    decimals: props.decimals,
                });
            }
            else
                return undefined;
        }
        case "boolean":
        case "string": {
            if (props.enum)
                return new EnumFormat(props.name, props.enum);
            return undefined;
        }
        case "date":
            return new DateFormat(props.name, props.dateFormat);
        default:
            return undefined;
    }
}
function createFormatter(props) {
    var _a;
    switch (props.type) {
        case "number":
        case "string":
        case "date":
        case "boolean": {
            var format = _create(props);
            if (props.prefix)
                format = new PrefixFormat(props.name, props.prefix, format);
            if (props.suffix)
                format = new SuffixFormat(props.name, props.suffix, format);
            return format;
        }
        case "array": {
            var format = undefined;
            if (props.array)
                format = _create(__assign(__assign({}, props), { type: props.array.type }));
            if (props.prefix)
                format = new PrefixFormat(props.name, props.prefix, format);
            if (props.suffix)
                format = new SuffixFormat(props.name, props.suffix, format);
            if (format)
                return new ArrayFormat({
                    name: props.name,
                    format: format,
                    maxVisible: (_a = props.array) === null || _a === void 0 ? void 0 : _a.maxVisible
                });
            return undefined;
        }
    }
}
exports.createFormatter = createFormatter;
var Formatters = {
    DateFormat: DateFormat,
    NumberFormat: NumberFormat,
    CurrencyFormat: CurrencyFormat,
    PrefixFormat: PrefixFormat,
    SuffixFormat: SuffixFormat,
    ArrayFormat: ArrayFormat,
    EnumFormat: EnumFormat,
    Combine: Combine,
    createFormatter: createFormatter
};
exports.default = Formatters;
