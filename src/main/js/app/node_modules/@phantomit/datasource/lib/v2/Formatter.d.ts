import { Currency, Format, KeyValue, Property, Row } from "./DataSource";
export declare class DateFormat implements Format {
    readonly name: string;
    private readonly _format;
    private readonly notSet;
    constructor(name: string, format?: string, notSet?: string);
    format(props: Property, row: Row, value: any): string;
}
export interface NumberFormatProps {
    name: string;
    decimals?: number;
    thousandSeparator?: boolean;
}
export declare class NumberFormat implements Format {
    readonly name: string;
    private readonly _decimals?;
    private readonly _thousandSeparator?;
    constructor(props: NumberFormatProps);
    format(props: Property, row: Row, value: number | undefined | null): string;
}
export interface CurrencyFormatProps extends NumberFormatProps {
    currency: Currency | ((props: Property, row: Row) => Currency);
}
export declare class CurrencyFormat extends NumberFormat {
    private readonly currency;
    constructor(props: CurrencyFormatProps);
    format(props: Property, row: Row, value: number | undefined | null): string;
}
export declare class EnumFormat implements Format {
    readonly name: string;
    private readonly enums;
    constructor(name: string, enums: KeyValue<any>);
    format(props: Property, row: Row, value: any): any;
}
export declare class PrefixFormat<T extends Format> implements Format {
    readonly name: string;
    private readonly _format?;
    private readonly prefix;
    constructor(name: string, prefix: string, format?: T);
    format(props: Property, row: Row, value: any): string;
}
export declare class SuffixFormat<T extends Format> implements Format {
    readonly name: string;
    private readonly _format?;
    private readonly suffix;
    constructor(name: string, suffix: string, format?: T);
    format(props: Property, row: Row, value: any): string;
}
export interface ArrayFormatProps<T extends Format> {
    maxVisible?: number;
    name: string;
    format: T;
}
export declare class ArrayFormat<T extends Format> implements Format {
    readonly name: string;
    private readonly _format;
    private readonly maxVisible?;
    constructor(props: ArrayFormatProps<T>);
    format(props: Property, row: Row, value: any[]): any[];
}
export declare class Combine<T extends Format, E extends Format> implements Format {
    name: string;
    private readonly a;
    private readonly b;
    constructor(name: string, a: T, b: E);
    format(props: Property, row: Row, value: any): any;
}
export declare function createFormatter(props: Property): DateFormat | NumberFormat | EnumFormat | ArrayFormat<Format> | undefined;
declare const Formatters: {
    DateFormat: typeof DateFormat;
    NumberFormat: typeof NumberFormat;
    CurrencyFormat: typeof CurrencyFormat;
    PrefixFormat: typeof PrefixFormat;
    SuffixFormat: typeof SuffixFormat;
    ArrayFormat: typeof ArrayFormat;
    EnumFormat: typeof EnumFormat;
    Combine: typeof Combine;
    createFormatter: typeof createFormatter;
};
export default Formatters;
