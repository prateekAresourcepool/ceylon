import { Cell, Datasource, EventType, Expression, Filter, Formatter, KeyValue, Listener, Row, serverInfo, Sort, SortColumn, Subscribers } from "../Datasource";
import { Column } from "../utils/definition";
export declare class LocalDatasource implements Datasource {
    view: number[];
    subscribers: Subscribers;
    viewExpression: Expression;
    rows: Row[];
    selected: number[];
    formatter: KeyValue<Formatter>;
    options: serverInfo;
    append(row: Row): Promise<Row[]>;
    updateIndex(): Promise<any>;
    _toView(): Promise<void>;
    _formattedValue(row: Row, key: string, viewIndex: number): string;
    cell(key: string, viewIndex: number, columnIndex: number | undefined): Cell;
    delete(viewIndex: number): Promise<Row>;
    filter(key: string, value?: Filter): Promise<Row[]>;
    row(rowIndex?: number, viewIndex?: number): Row;
    save(row: Row): Promise<Row>;
    search(value: string): Promise<Row[]>;
    select(viewIndex: number | undefined, checked: boolean | undefined): Promise<Row[]>;
    sort(key: string, sort: Sort): Promise<Row[]>;
    size(): number;
    init(options: serverInfo): Promise<boolean>;
    refresh(): Promise<boolean>;
    clear(options: {
        filter?: boolean;
        sort?: boolean;
        search?: boolean;
    }): Promise<boolean>;
    addFormatter(key: string, format: Formatter): boolean;
    generateFormatters(columns: Column[]): boolean;
    isSelected(viewIndex: number): boolean;
    notify(type: EventType, data?: any): Promise<void[]>;
    exportView(keys: string[]): Promise<string[]>;
    setViewExpression(filters?: KeyValue<Filter>, sort?: SortColumn[], search?: string): Promise<boolean>;
    distinct(key: string): Promise<object>;
    subscribe(key: string, handler: Listener): void;
    unsubscribe(key: string): void;
    trigger(key: EventType, data: any): Promise<void>;
}
