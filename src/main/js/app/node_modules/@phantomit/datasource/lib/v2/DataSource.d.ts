export interface KeyValue<V> {
    [key: string]: V;
}
export interface Row extends KeyValue<any> {
    __id__: string;
}
export interface Event {
    key: string;
    payload: KeyValue<any>;
}
export declare enum SortType {
    Ascending = "asc",
    Descending = "desc"
}
export interface Sort {
    name: string;
    type: SortType;
    handler: (a: Row, b: Row) => number;
}
export declare enum EventType {
    Clean = "clean",
    Refresh = "refresh",
    Init = "init",
    Sort = "sort",
    Add = "add",
    Remove = "remove",
    Update = "update",
    Filter = "filter",
    Search = "search",
    Select = "select"
}
export interface Listener {
    key: EventType | string;
    onBefore?: (e: Event) => Promise<boolean>;
    onAfter?: (e: Event) => Promise<void>;
    onError?: (e: Error) => Promise<void>;
}
export interface Currency {
    symbol: string;
    prefix?: boolean;
}
export interface Property {
    name: string;
    title: string;
    enum?: KeyValue<string>;
    type: 'number' | 'string' | 'date' | 'boolean' | 'object' | 'array';
    currency?: Currency | string | ((props: Property, row: Row) => Currency);
    decimals?: number;
    thousandSep?: boolean;
    prefix?: string;
    suffix?: string;
    dateFormat?: string;
    array?: {
        maxVisible?: number;
        type: 'number' | 'string' | 'date' | 'boolean' | 'object';
    };
}
export interface Filter {
    name: string;
    validator: (row: Row, index: number) => Promise<boolean>;
}
export interface Format {
    name: string;
    format: (props: Property, row: Row, value: any) => any;
}
export interface DataResponse {
    rows: KeyValue<any>[];
    total?: number;
}
export interface Persistence {
    fetch: () => Promise<DataResponse>;
    save?: (rows: KeyValue<any>) => Promise<DataResponse>;
    delete?: (rows: KeyValue<any>) => Promise<DataResponse>;
}
export interface Actions {
    init: (props: Property[], seqDigits?: number) => Promise<void>;
    refresh: () => Promise<void>;
    clean: () => Promise<void>;
    save: (rows: Row[]) => Promise<void>;
    delete: (rows: Row[]) => Promise<void>;
    add: (values: KeyValue<any>[]) => Promise<void>;
    sort: (sort: Sort) => Promise<void>;
    filter: (filter: Filter) => Promise<void>;
    search: (text: string) => Promise<void>;
    select: (index: number, state?: boolean) => Promise<void>;
}
export interface Id {
    id: (value: KeyValue<any>) => Promise<string>;
    reset: () => void;
}
export interface DataSource extends Actions {
    addListener: (listener: Listener) => void;
    addFormatter: (format: Format, combine?: boolean) => void;
    formatted: (index: number, name: string) => Promise<any>;
    row: (index: number) => Row;
    property: (name: string) => Property | undefined;
    slice: (from: number, to: number) => Promise<Row[]>;
}
