import { Filter, Row } from "./DataSource";
export declare function compare(a: any, b: any): number;
export declare function contains(a: any, b: any): boolean;
export declare class LessThan<T = number | string | null | undefined> implements Filter {
    name: string;
    value: T;
    constructor(name: string, value: T);
    validator(row: Row, index: number): Promise<boolean>;
}
export declare class LessThanOrEqual<T = number | string | null | undefined> implements Filter {
    name: string;
    value: T;
    constructor(name: string, value: T);
    validator(row: Row, index: number): Promise<boolean>;
}
export declare class GreaterThan<T = number | string | null | undefined> implements Filter {
    name: string;
    value: T;
    constructor(name: string, value: T);
    validator(row: Row, index: number): Promise<boolean>;
}
export declare class GreaterThanOrEqual<T = number | string | null | undefined> implements Filter {
    name: string;
    value: T;
    constructor(name: string, value: T);
    validator(row: Row, index: number): Promise<boolean>;
}
export declare class Equal<T = number | string | null | undefined> implements Filter {
    name: string;
    value: T;
    constructor(name: string, value: T);
    validator(row: Row, index: number): Promise<boolean>;
}
export declare class Contains<T = string | object | null | undefined> implements Filter {
    name: string;
    value: T;
    constructor(name: string, value: T);
    validator(row: Row, index: number): Promise<boolean>;
}
export declare class NotContains<T = string | object | null | undefined> implements Filter {
    name: string;
    value: T;
    constructor(name: string, value: T);
    validator(row: Row, index: number): Promise<boolean>;
}
export declare class And<T extends Filter, E extends Filter> implements Filter {
    readonly name: string;
    private readonly a;
    private readonly b;
    constructor(a: T, b: E);
    validator(row: Row, index: number): Promise<boolean>;
}
export declare class Or<T extends Filter, E extends Filter> implements Filter {
    readonly name: string;
    private readonly a;
    private readonly b;
    constructor(a: T, b: E);
    validator(row: Row, index: number): Promise<boolean>;
}
export declare class Not<T extends Filter> implements Filter {
    readonly name: string;
    private readonly a;
    constructor(a: T);
    validator(row: Row, index: number): Promise<boolean>;
}
export declare class Any implements Filter {
    readonly name: string;
    private readonly value;
    constructor(value: string);
    validator(row: Row, index: number): Promise<any>;
}
declare const Filters: {
    LessThan: typeof LessThan;
    LessThanOrEqual: typeof LessThanOrEqual;
    GreaterThan: typeof GreaterThan;
    GreaterThanOrEqual: typeof GreaterThanOrEqual;
    Equal: typeof Equal;
    Contains: typeof Contains;
    NotContains: typeof NotContains;
    And: typeof And;
    Or: typeof Or;
};
export default Filters;
