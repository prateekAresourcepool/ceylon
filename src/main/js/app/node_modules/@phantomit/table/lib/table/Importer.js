"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*global Response*/
var react_1 = __importDefault(require("react"));
var definition_1 = require("@phantomit/datasource/lib/utils/definition");
var moment_1 = __importDefault(require("moment"));
var antd_1 = require("antd");
var icons_1 = require("@ant-design/icons");
var papaparse_1 = __importDefault(require("papaparse"));
var Text_1 = __importDefault(require("antd/lib/typography/Text"));
var RecordState;
(function (RecordState) {
    RecordState[RecordState["pending"] = 0] = "pending";
    RecordState[RecordState["rejected"] = 1] = "rejected";
    RecordState[RecordState["completed"] = 2] = "completed";
})(RecordState = exports.RecordState || (exports.RecordState = {}));
var ImportAction;
(function (ImportAction) {
    ImportAction[ImportAction["none"] = 0] = "none";
    ImportAction[ImportAction["uploading"] = 1] = "uploading";
    ImportAction[ImportAction["importing"] = 2] = "importing";
})(ImportAction = exports.ImportAction || (exports.ImportAction = {}));
exports.mapToRow = function (columns, values) {
    return columns.filter(function (o) { return o.schemaIndex !== null; })
        .reduce(function (acc, current) {
        if (current.schemaIndex != null) {
            switch (current.type) {
                case definition_1.ColumnType.int:
                    acc[current.dataIndex] = parseInt(values[current.schemaIndex]) || 0;
                    break;
                case definition_1.ColumnType.float:
                    acc[current.dataIndex] = parseFloat(values[current.schemaIndex]) || 0.0;
                    break;
                case definition_1.ColumnType.boolean:
                    acc[current.dataIndex] = values[current.schemaIndex].toLowerCase().localeCompare("true") === 0;
                    break;
                case definition_1.ColumnType.date:
                    moment_1.default(acc[current.dataIndex] = values[current.schemaIndex]).format("yyyy-MM-DD");
                    break;
                case definition_1.ColumnType.currency:
                    acc[current.dataIndex] = parseFloat(values[current.schemaIndex]) || 0.0;
                    break;
                default:
                    acc[current.dataIndex] = values[current.schemaIndex];
            }
        }
        return acc;
    }, {});
};
exports.Importer = function (props) {
    var _a = react_1.default.useState({
        records: [],
        success: 0,
        rejected: 0,
        action: ImportAction.none
    }), opt = _a[0], setOpt = _a[1];
    var importData = react_1.default.useCallback(function (row) { return __awaiter(void 0, void 0, void 0, function () {
        var state, _a, _b, current, records, success, rejected;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!(row.state === RecordState.rejected)) return [3 /*break*/, 1];
                    _a = false;
                    return [3 /*break*/, 3];
                case 1: return [4 /*yield*/, props.save(row.row)];
                case 2:
                    _a = _c.sent();
                    _c.label = 3;
                case 3:
                    state = _a;
                    _b = opt.current, current = _b === void 0 ? 0 : _b, records = opt.records, success = opt.success, rejected = opt.rejected;
                    records[current].state = state ? RecordState.completed : RecordState.rejected;
                    if (state)
                        success++;
                    else
                        rejected++;
                    if (current < opt.records.length - 1) {
                        setOpt(__assign(__assign({}, opt), { records: __spreadArrays(records), success: success, rejected: rejected, current: current + 1 }));
                    }
                    else {
                        setOpt(__assign(__assign({}, opt), { records: __spreadArrays(records), success: success, rejected: rejected, action: ImportAction.none }));
                    }
                    return [2 /*return*/];
            }
        });
    }); }, [opt, props]);
    var parseFile = function (file) { return __awaiter(void 0, void 0, void 0, function () {
        var data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, new Promise(function (r) { return setTimeout(r, 1000); })];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, new Response(file).text()];
                case 2:
                    data = _a.sent();
                    return [2 /*return*/, new Promise(function (r) {
                            papaparse_1.default.parse(data, {
                                skipEmptyLines: true,
                                header: false,
                                complete: function (results, file) {
                                    r(results.data);
                                }
                            });
                        })];
            }
        });
    }); };
    react_1.default.useEffect(function () {
        if (opt.action === ImportAction.importing) {
            var _a = opt.current, current = _a === void 0 ? 0 : _a;
            if (current < opt.records.length)
                importData(opt.records[current]);
            else
                setOpt(__assign(__assign({}, opt), { action: ImportAction.none }));
        }
    }, [importData, opt]);
    var columns = props.columns.filter(function (o) { return o.schemaIndex != null; }).map(function (q) { return (__assign(__assign({}, q), { render: function (value, row, index) {
            return react_1.default.createElement(Text_1.default, { delete: opt.records[index].state === RecordState.rejected }, "" + opt.records[index].row[q.dataIndex]);
        } })); });
    var actionCol = {
        title: "",
        dataIndex: "",
        type: definition_1.ColumnType.string,
        width: 120,
        render: function (value, row, index) {
            return react_1.default.createElement(antd_1.Button, { disabled: opt.records[index].state === RecordState.rejected, icon: react_1.default.createElement(icons_1.DeleteOutlined, null), onClick: function () {
                    var records = opt.records;
                    records[index].state = RecordState.rejected;
                    setOpt(__assign(__assign({}, opt), { records: __spreadArrays(records) }));
                } });
        }
    };
    columns.unshift(actionCol);
    return react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(antd_1.Modal, { title: "Data Import", centered: true, width: "80vw", visible: props.visible, onCancel: function () {
                props.onClose();
                setOpt({ records: [], current: undefined, success: 0, rejected: 0, action: ImportAction.none });
            }, closable: opt.action === ImportAction.none, footer: [
                react_1.default.createElement("div", { key: "upload.button", style: { float: 'left' } },
                    react_1.default.createElement(antd_1.Upload, { showUploadList: false, beforeUpload: function () {
                            setOpt(__assign(__assign({}, opt), { action: ImportAction.uploading }));
                            return true;
                        }, accept: ".csv", action: function (file) { return __awaiter(void 0, void 0, void 0, function () {
                            var data, records;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, parseFile(file)];
                                    case 1:
                                        data = _a.sent();
                                        records = data.map(function (o, i) { return ({
                                            row: exports.mapToRow(props.columns, o),
                                            state: RecordState.pending,
                                            __id__: i
                                        }); });
                                        setOpt(__assign(__assign({}, opt), { records: records, action: ImportAction.none, current: undefined, success: 0, rejected: 0 }));
                                        return [2 /*return*/, ""];
                                }
                            });
                        }); } },
                        react_1.default.createElement(antd_1.Button, { disabled: opt.action !== ImportAction.none, className: "ant-btn-danger", style: { float: 'left' } },
                            react_1.default.createElement(icons_1.UploadOutlined, null),
                            " Click to Upload"))),
                react_1.default.createElement(antd_1.Button, { key: "clear.button", disabled: opt.action !== ImportAction.none, onClick: function () {
                        setOpt({ records: [], current: undefined, success: 0, rejected: 0, action: ImportAction.none });
                    } }, "Clear"),
                react_1.default.createElement(antd_1.Button, { key: "import.button", disabled: opt.action !== ImportAction.none, type: "primary", onClick: function () {
                        setOpt(__assign(__assign({}, opt), { action: ImportAction.importing, current: 0 }));
                    } }, "Import")
            ] },
            react_1.default.createElement(antd_1.Descriptions, { key: "descriptions", column: 3 },
                react_1.default.createElement(antd_1.Descriptions.Item, { key: "total", label: "Total" }, opt.records.length),
                react_1.default.createElement(antd_1.Descriptions.Item, { key: "success", label: "Success" }, opt.success),
                react_1.default.createElement(antd_1.Descriptions.Item, { key: "rejected", label: "Rejected" }, opt.rejected)),
            react_1.default.createElement(antd_1.Progress, { key: "import.progress", style: { marginRight: 15 }, percent: ((opt.success + opt.rejected) * 100) / opt.records.length, format: function (percent) { var _a; return ((_a = percent) === null || _a === void 0 ? void 0 : _a.toFixed(percent % 1 === 0 ? 0 : 2)) + "%"; } }),
            react_1.default.createElement(antd_1.Table, { key: "import.table", loading: opt.action !== ImportAction.none, size: "small", columns: columns, rowKey: "__id__", dataSource: opt.records, pagination: false, scroll: { y: '50vh' }, rowClassName: function (r, index) { return "danger"; } })));
};
