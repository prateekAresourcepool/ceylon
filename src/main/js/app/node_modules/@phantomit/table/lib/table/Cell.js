"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var definition_1 = require("@phantomit/datasource/lib/utils/definition");
var antd_1 = require("antd");
var moment_1 = __importDefault(require("moment"));
var icons_1 = require("@ant-design/icons");
exports.EditCell = function (props) {
    var _a = props.onChange, onChange = _a === void 0 ? function (value) { } : _a;
    return react_1.default.createElement(react_1.default.Fragment, null,
        props.type === definition_1.ColumnType.string && react_1.default.createElement(antd_1.Input, { value: props.value, onChange: function (e) {
                var value = e.target.value;
                return onChange(value);
            } }),
        props.type === definition_1.ColumnType.int && react_1.default.createElement(antd_1.InputNumber, { value: props.value, onChange: props.onChange }),
        props.type === definition_1.ColumnType.float && react_1.default.createElement(antd_1.InputNumber, { precision: 2, value: props.value, onChange: props.onChange }),
        props.type === definition_1.ColumnType.boolean && react_1.default.createElement(antd_1.Checkbox, { checked: props.value, value: props.value, onChange: function (e) {
                onChange(e.target.checked);
            } }),
        props.type === definition_1.ColumnType.date && react_1.default.createElement(antd_1.DatePicker, { value: moment_1.default(props.value), onChange: function (date) {
                onChange(moment_1.default(date).format());
            } }),
        props.type === definition_1.ColumnType.currency && react_1.default.createElement(antd_1.InputNumber, { prefix: "$", precision: 2, value: props.value, onChange: props.onChange }));
};
exports.CellContent = function (props) {
    return react_1.default.createElement(react_1.default.Fragment, null,
        !props.edit && props.formatted,
        props.edit && react_1.default.createElement(exports.EditCell, __assign({}, props)));
};
exports.Action = function (props) {
    if (!props.isEditing) {
        return react_1.default.createElement(react_1.default.Fragment, null,
            props.onSelect && react_1.default.createElement(antd_1.Checkbox, { style: { marginLeft: 5 }, checked: props.isSelected, onChange: function (e) {
                    props.onSelect && props.onSelect(e.target.checked);
                } }),
            props.onEdit && react_1.default.createElement(antd_1.Button, { style: { marginLeft: 5 }, icon: react_1.default.createElement(icons_1.EditOutlined, null), onClick: function (e) {
                    props.onEdit && props.onEdit();
                } }),
            props.onDelete && react_1.default.createElement(antd_1.Button, { style: { marginLeft: 5 }, icon: react_1.default.createElement(icons_1.DeleteOutlined, null), onClick: function (e) {
                    props.onDelete && props.onDelete();
                } }));
    }
    else {
        return react_1.default.createElement(react_1.default.Fragment, null,
            props.onApply && react_1.default.createElement(antd_1.Button, { style: { marginLeft: 5 + (props.onSelect ? 21 : 0) }, icon: react_1.default.createElement(icons_1.CheckOutlined, null), onClick: function (e) {
                    props.onApply && props.onApply();
                } }),
            props.onCancel && react_1.default.createElement(antd_1.Button, { style: { marginLeft: 5 }, icon: react_1.default.createElement(icons_1.CloseOutlined, null), onClick: function (e) {
                    props.onCancel && props.onCancel();
                } }));
    }
};
